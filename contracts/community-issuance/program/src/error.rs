//! All error types for this program

use num_derive::FromPrimitive;
use solana_program::{decode_error::DecodeError, program_error::ProgramError};
use thiserror::Error;

/// Errors that may be returned by the StabilityPool program.
#[derive(Clone, Debug, Eq, Error, FromPrimitive, PartialEq)]
pub enum CommunityIssuanceError {
    // 0.
    /// The account cannot be initialized because it is already being used.
    #[error("AlreadyInUse")]
    AlreadyInUse,
    /// The program address provided doesn't match the value generated by the program.
    #[error("InvalidProgramAddress")]
    InvalidProgramAddress,
    /// The solid staking state is invalid.
    #[error("InvalidState")]
    InvalidState,
    /// pool token account's owner is invalid.
    #[error("InvalidOwner")]
    InvalidOwner,
    /// given pool token account isn't same with pool token account
    #[error("InvalidPoolToken")]
    InvalidPoolToken,
}
impl From<CommunityIssuanceError> for ProgramError {
    fn from(e: CommunityIssuanceError) -> Self {
        ProgramError::Custom(e as u32)
    }
}
impl<T> DecodeError<T> for CommunityIssuanceError {
    fn type_of() -> &'static str {
        "SOLID Staking Error"
    }
} 
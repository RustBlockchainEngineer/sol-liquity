//! All error types for this program

use num_derive::FromPrimitive;
use solana_program::{decode_error::DecodeError, program_error::ProgramError};
use thiserror::Error;

/// Errors that may be returned by the TroveManager program.
#[derive(Clone, Debug, Eq, Error, FromPrimitive, PartialEq)]
pub enum TroveManagerError {
    // 0.
    /// The account cannot be initialized because it is already being used.
    #[error("AlreadyInUse")]
    AlreadyInUse,
    /// The program address provided doesn't match the value generated by the program.
    #[error("InvalidProgramAddress")]
    InvalidProgramAddress,
    /// The trove manager state is invalid.
    #[error("InvalidState")]
    InvalidState,
    /// account's owner is invalid.
    #[error("InvalidOwner")]
    InvalidOwner,
    /// invalid borrower operations.
    #[error("InvalidBorrwerOperations")]
    InvalidBorrwerOperations,
    /// borrower trove is not active yet
    #[error("TroveNotActive")]
    TroveNotActive,
    /// Oracle config is invalid
    #[error("Input oracle config is invalid")]
    InvalidOracleConfig,
    /// Invalid account input
    #[error("Invalid account input")]
    InvalidAccountInput,
    /// Math operation overflow
    #[error("Math operation overflow")]
    MathOverflow,
    /// Nothing to liquidate
    #[error("Nothing to liquidate")]
    NothingToLiquidate,
    /// Max fee percentage must be between 0.5% and 100%
    #[error("Max fee percentage must be between 0.5% and 100%")]
    MaxFeePercentageError,
    /// TroveManager: Cannot redeem when TCR < MCR
    #[error("TroveManager: Cannot redeem when TCR < MCR")]
    TCRError,
    /// Amount must be greater than zero
    #[error("Amount must be greater than zero")]
    ZeroAmount,
    /// Fee exceeded provided maximum
    #[error("Fee exceeded provided maximum")]
    FeeExceeded,
}
impl From<TroveManagerError> for ProgramError {
    fn from(e: TroveManagerError) -> Self {
        ProgramError::Custom(e as u32)
    }
}
impl<T> DecodeError<T> for TroveManagerError {
    fn type_of() -> &'static str {
        "Trove Manager Error"
    }
} 